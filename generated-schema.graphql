type Query {
  getProperties(year: String!): [Property]!
  getStatistics: Statistic!
  getPropertyEntity(propertyId: Int!): PropertyEntity!
  getUser(id: Int!): User!
}

type Mutation {
  addProperty(input: AddPropertyInput!): Property!
  deleteProperty(id: Int!): Boolean!
  addRoom(input: AddRoomInput!): Room!
  deleteRoom(id: Int!): Boolean!
  createUser(user: CreateUserInput!): User!
  login(credentials: LoginInput!): String!
}

input AddPropertyInput {
  name: String!
  address: String!
  year: String!
}

input AddRoomInput {
  propertyId: Int!
  name: String!
  available: Boolean!
  year: String!
}

type Property {
  id: Int!
  name: String!
  address: String!
  totalRooms: Int!
  availableRooms: Int!
  year: String!
}

type Room {
  id: Int!
  propertyId: Int!
  name: String!
  available: Boolean!
  year: String!
  updates: [UpdateLog]!
}

type UpdateLog {
  id: Int!
  roomId: Int!
  timestamp: String!
  room: String!
}

type Statistic {
  totalProperties: Int!
  totalOpenRooms: Int!
  totalUnavailableRooms: Int!
  totalRooms: Int!
}

type PropertyEntity {
  property: Property!
  rooms: [Room]!
}

input LoginInput {
  username: String!
  password: String!
}

input CreateUserInput {
  admin: Boolean!
  name: String
  username: String!
  password: String!
  createdBy: String
}

type User {
  id: Int!
  admin: Boolean!
  name: String
  username: String!
  createdAt: String!
  createdBy: String
}

schema {
  query: Query
  mutation: Mutation
}
