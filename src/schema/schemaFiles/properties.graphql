type Query {
	getProperties(year: String!): [Property]!
	getStatistics: Statistic!
	getPropertyEntity(propertyId: Int!, year: Int!): PropertyEntity!
}

type Mutation {
	addProperty(input: AddPropertyInput!): Property!
	deleteProperty(id: Int!): Boolean!
	editProperty(id: Int!, input: EditPropertyInput!): Boolean!
	addRoom(input: AddRoomInput!): Room!
	deleteRoom(id: Int!): Boolean!
	editRoom(id: Int!, input: EditRoomInput): Boolean!
}

input EditPropertyInput {
	name: String
	address: String
}

input EditRoomInput {
	name: String
	available: Boolean
}

input AddPropertyInput {
	name: String!
	address: String!
	year: String!
}

input AddRoomInput {
	propertyId: Int!
	name: String!
	available: Boolean!
	year: String!
}

type Property {
	id: Int!
	name: String!
	address: String!
	totalRooms: Int!
	availableRooms: Int!
	year: String!
}

type Room {
	id: Int!
	propertyId: Int!
	name: String!
	available: Boolean!
	year: String!
	updates: [UpdateLog]!
}

type UpdateLog {
	id: Int!
	roomId: Int!
	timestamp: String!
	room: String!
}

type Statistic {
	totalProperties: Int!
	totalOpenRooms: Int!
	totalUnavailableRooms: Int!
	totalRooms: Int!
}

type PropertyEntity {
	property: Property!
	rooms: [Room]!
}
